# Generated by Django 2.1.7 on 2020-08-13 09:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import models_app.models
import utilities.image_validation


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('phoneNo', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('deviceId', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_device', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExamBlankSpaceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('answer', models.CharField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExamChoiceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ExamDescribeQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('answer', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='G_ChoiceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='G_Options',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128, verbose_name="Answer's text here.")),
                ('is_correct', models.BooleanField(default=False)),
                ('label', models.CharField(max_length=1)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g_option', to='models_app.G_ChoiceQuestionModel')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='G_UnitModel',
            fields=[
                ('unitId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('pdf', models.FileField(upload_to=models_app.models.upload_path, validators=[utilities.image_validation.validate_image])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='GeneralKnowlegdyModel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='GradeModel',
            fields=[
                ('gradeId', models.AutoField(primary_key=True, serialize=False)),
                ('gradeTitle', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='L_ChoiceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='L_Options',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128, verbose_name="Answer's text here.")),
                ('is_correct', models.BooleanField(default=False)),
                ('label', models.CharField(max_length=1)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='l_option', to='models_app.L_ChoiceQuestionModel')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='L_UnitModel',
            fields=[
                ('unitId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('pdf', models.FileField(upload_to=models_app.models.upload_path, validators=[utilities.image_validation.validate_image])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='LearnLanguageModel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('is_local', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='MatchingInstructionModel',
            fields=[
                ('instructionId', models.AutoField(primary_key=True, serialize=False)),
                ('instructionText', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MatchingPosibleAnswersModels',
            fields=[
                ('matchingId', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=1)),
                ('optionText', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instruction_posible', to='models_app.MatchingInstructionModel')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='MatchingQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField()),
                ('questionText', models.TextField()),
                ('answer', models.CharField(max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instruction_question', to='models_app.MatchingInstructionModel')),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Options',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128, verbose_name="Answer's text here.")),
                ('is_correct', models.BooleanField(default=False)),
                ('label', models.CharField(max_length=1)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_option', to='models_app.ExamChoiceQuestionModel')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='QuizeBlankSpaceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('answer', models.CharField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizeChoiceQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizeDescribeQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField(max_length=1000)),
                ('answer', models.CharField(max_length=1000)),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizeMatchingInstructionModel',
            fields=[
                ('instructionId', models.AutoField(primary_key=True, serialize=False)),
                ('instructionText', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizeMatchingPosibleAnswersModels',
            fields=[
                ('matchingId', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=1)),
                ('optionText', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quize_instruction_posible', to='models_app.MatchingInstructionModel')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='QuizeMatchingQuestionModel',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.IntegerField()),
                ('questionText', models.TextField()),
                ('answer', models.CharField(max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('instruction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quize_instruction_question', to='models_app.MatchingInstructionModel')),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='QuizeOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128, verbose_name="Answer's text here.")),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quize_option', to='models_app.QuizeChoiceQuestionModel')),
            ],
        ),
        migrations.CreateModel(
            name='RegionModel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('primaryLanguage', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='SubjectModel',
            fields=[
                ('subjectId', models.AutoField(primary_key=True, serialize=False)),
                ('language', models.CharField(choices=[('Amharic', 'Amharic'), ('Oromifa', 'Oromifa'), ('tigregna', 'tigregna')], max_length=50)),
                ('subjectName', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_subejct', to='models_app.GradeModel')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TransactionModel',
            fields=[
                ('transactionId', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_transaction', to='models_app.GradeModel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_transaction', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UnitModel',
            fields=[
                ('unitId', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('pdf', models.FileField(upload_to=models_app.models.upload_path, validators=[utilities.image_validation.validate_image])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_unit', to='models_app.SubjectModel')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='quizematchinginstructionmodel',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_instruction', to='models_app.UnitModel'),
        ),
        migrations.AddField(
            model_name='quizedescribequestionmodel',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_describe', to='models_app.UnitModel'),
        ),
        migrations.AddField(
            model_name='quizechoicequestionmodel',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_choice', to='models_app.UnitModel'),
        ),
        migrations.AddField(
            model_name='quizeblankspacequestionmodel',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_blank', to='models_app.UnitModel'),
        ),
        migrations.AddField(
            model_name='matchinginstructionmodel',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_instruction', to='models_app.SubjectModel'),
        ),
        migrations.AddField(
            model_name='l_unitmodel',
            name='g_knowledy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='l_unit', to='models_app.LearnLanguageModel'),
        ),
        migrations.AddField(
            model_name='l_choicequestionmodel',
            name='g_knowledgy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='l_choice', to='models_app.LearnLanguageModel'),
        ),
        migrations.AddField(
            model_name='g_unitmodel',
            name='g_knowledy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g_unit', to='models_app.GeneralKnowlegdyModel'),
        ),
        migrations.AddField(
            model_name='g_choicequestionmodel',
            name='g_knowledgy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g_choice', to='models_app.GeneralKnowlegdyModel'),
        ),
        migrations.AddField(
            model_name='examdescribequestionmodel',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_describe', to='models_app.SubjectModel'),
        ),
        migrations.AddField(
            model_name='examchoicequestionmodel',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_choice', to='models_app.SubjectModel'),
        ),
        migrations.AddField(
            model_name='examblankspacequestionmodel',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_blank', to='models_app.SubjectModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='region_user', to='models_app.RegionModel'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='unitmodel',
            unique_together={('name', 'subject')},
        ),
        migrations.AlterUniqueTogether(
            name='subjectmodel',
            unique_together={('grade', 'subjectName')},
        ),
        migrations.AlterUniqueTogether(
            name='quizematchingquestionmodel',
            unique_together={('instruction', 'questionText'), ('instruction', 'answer'), ('instruction', 'number')},
        ),
        migrations.AlterUniqueTogether(
            name='quizematchingposibleanswersmodels',
            unique_together={('instruction', 'label'), ('instruction', 'optionText')},
        ),
        migrations.AlterUniqueTogether(
            name='options',
            unique_together={('question', 'text'), ('question', 'label')},
        ),
        migrations.AlterUniqueTogether(
            name='matchingquestionmodel',
            unique_together={('instruction', 'questionText'), ('instruction', 'answer'), ('instruction', 'number')},
        ),
        migrations.AlterUniqueTogether(
            name='matchingposibleanswersmodels',
            unique_together={('instruction', 'label'), ('instruction', 'optionText')},
        ),
        migrations.AlterUniqueTogether(
            name='l_unitmodel',
            unique_together={('name', 'g_knowledy')},
        ),
        migrations.AlterUniqueTogether(
            name='l_options',
            unique_together={('question', 'text'), ('question', 'label')},
        ),
        migrations.AlterUniqueTogether(
            name='g_unitmodel',
            unique_together={('name', 'g_knowledy')},
        ),
        migrations.AlterUniqueTogether(
            name='g_options',
            unique_together={('question', 'text'), ('question', 'label')},
        ),
    ]
